class generatePw{

    /*
    Math.floor round down the number generated by Math.random
    Multiple the random value by 10 for number, 26 for alphabet
    Add the UTF-16 code unit that works with the .fromCharCode() function to create a string
        from the sequence of value added i.e (48 for number, 97 for lowercase and 65 for uppercase)
    Instead of using the Chart Code for the symbol, got all the symbol I want 
        and did the same math to get random symbol
    */

    static async generatePassword(req, res, next) {
        console.log(req.body)
        try {
            let { userLength } = req.body
            let pwd = ""
            while( !pwd || pwd.length < userLength ) {
                let symbol = "~!@#$%^&*()_+=-{}][|\"`';:,.<>/? "
                pwd += String.fromCharCode(Math.floor(Math.random()*10)+48)
                    + String.fromCharCode(Math.floor(Math.random()*26)+97)
                    + String.fromCharCode(Math.floor(Math.random()*26)+65)
                    + symbol[Math.floor(Math.random()*symbol.length)].slice(-9)
            }

            console.log(pwd.substring(0, userLength))

            return
        } catch (error) {
            next(error)
        }
    }
}

module.exports = generatePw
const SaveNewSitePw = require("../models/save-password-model")
const passAuth = require("../middleware/password.middleware")
const jwt = require("jsonwebtoken")
const { TOKEN_KEY, APP_NAME } = require("../config/index")

class generatePw{

    static async generatePWInfo(req, res, next) {
        try {
            let { passwordl } = req.body            
            res.json( await generatePw.generatePassword(passwordl) )
        } catch (error) {
            next(error)
        }
    }

    static async generatePassword(value) {

    /*
    Math.floor round down the number generated by Math.random
    Multiple the random value by 10 for number, 26 for alphabet
    Add the UTF-16 code unit that works with the .fromCharCode() function to create a string
        from the sequence of value added i.e (48 for number, 97 for lowercase and 65 for uppercase)
    Instead of using the Chart Code for the symbol, got all the symbol I want 
        and did the same math to get random symbol
    */
        let pwd = ""
            while( !pwd || pwd.length < value ) {
                let symbol = "~!@#$%^&*()_+=-{}][|\"`';:,.<>/? "
                pwd += String.fromCharCode(Math.floor(Math.random()*10)+48)
                    + String.fromCharCode(Math.floor(Math.random()*26)+97)
                    + String.fromCharCode(Math.floor(Math.random()*26)+65)
                    + symbol[Math.floor(Math.random()*symbol.length)].slice(-9)
            }

            return pwd.substring(0, value)
    }

    static async saveNewPwInfo(req, res, next) {
        try {
            const user = req.user
            const { passphrase, savePassword, siteName } = req.body

            // const gotpassphrase = SaveNewSitePw.find({ siteName: siteName })
            // if (gotpassphrase) {
            //     const err = new Error()
            //     err.name = "Not Acceptable"
            //     err.status = 406
            //     err.message = "This passphrase and/or sitename is in use"
            //     throw err
            // }

            const token = jwt.sign({
                userId: user._id,
                siteName: siteName,
                savePassword: savePassword
            }, {
                key: TOKEN_KEY,
                passphrase: passphrase
            }, {
                algorithm: "RS512",
                noTimestamp: true,
                issuer: APP_NAME
            })

            console.log( token )

            const decode = jwt.verify(
                token,
                {
                    key: TOKEN_KEY, passphrase: passphrase
                }, {
                    algorithms: "RS512",
                    ignoreExpiration: true,
                    issuer: "Inioluwa"
                }
            )

            console.log( decode )

            // const hash = passAuth.hashPassword( savePassword )

            // await new SaveNewSitePw(
            //     {$set: { passphrase: passphrase, savePassword: hash, siteName: siteName } }, {new: true}
            //     ).save()

        } catch (error) {
            next(error)
        }
    }
}

module.exports = generatePw